-----------------------------------------------------------------------------------------------------------------
-- Проверка корректности выставляемой оценки
CREATE TRIGGER check_grade_validity_trigger
ON grades
INSTEAD OF INSERT
AS
BEGIN
    IF EXISTS (
        SELECT 1 FROM inserted 
        WHERE grade NOT IN (2, 3, 4, 5) AND grade IS NOT NULL
    )
    BEGIN
        THROW 50000, 'Оценка должна быть 2, 3, 4 или 5, или отсутствовать', 1;
    END

    INSERT INTO grades (student_id, subject_id, grade, teacher_id)
    SELECT student_id, subject_id, grade, teacher_id FROM inserted;
END;

INSERT INTO grades (student_id, subject_id, grade, teacher_id)
VALUES (1, 1, 1, 1); -- Ошибка

-----------------------------------------------------------------------------------------------------------------
-- Корректность выставляемой оценки преподавателем
CREATE TRIGGER validate_grade_trigger
ON grades
INSTEAD OF INSERT
AS
BEGIN
    IF EXISTS (
        SELECT 1 
        FROM inserted i
        LEFT JOIN subjects s ON i.subject_id = s.id AND i.teacher_id = s.teacher_id
        WHERE s.id IS NULL
    )
    BEGIN
        THROW 50000, 'Преподаватель не может выставить оценку по этому предмету', 1;
    END

    IF EXISTS (
        SELECT 1 FROM inserted WHERE grade NOT IN (2, 3, 4, 5)
    )
    BEGIN
        THROW 50000, 'Недопустимая оценка. Допустимы только 2, 3, 4, 5', 1;
    END

    INSERT INTO grades (student_id, subject_id, grade, teacher_id)
    SELECT student_id, subject_id, grade, teacher_id FROM inserted;
END;

INSERT INTO grades (student_id, subject_id, grade, teacher_id)
VALUES (1, 1, 5, 2); -- Ошибка

-----------------------------------------------------------------------------------------------------------------
-- Среднее значение оценок группы по предмету
CREATE TABLE group_subject_avg (
    group_id INT,
    subject_id INT,
    avg_grade FLOAT,
    PRIMARY KEY (group_id, subject_id)
);

CREATE TRIGGER update_group_subject_avg_trigger
ON grades
AFTER INSERT
AS
BEGIN
    DECLARE @student_group_id INT, @subject_id INT, @new_avg FLOAT;

    SELECT @subject_id = subject_id FROM inserted;
    SELECT @student_group_id = group_id FROM students WHERE id = (SELECT student_id FROM inserted);

    SELECT @new_avg = AVG(grade)
    FROM grades
    JOIN students ON grades.student_id = students.id
    WHERE grades.subject_id = @subject_id
    AND students.group_id = @student_group_id
    AND grades.grade IS NOT NULL;

    MERGE INTO group_subject_avg AS target
    USING (SELECT @student_group_id AS group_id, @subject_id AS subject_id, @new_avg AS avg_grade) AS source
    ON target.group_id = source.group_id AND target.subject_id = source.subject_id
    WHEN MATCHED THEN UPDATE SET avg_grade = source.avg_grade
    WHEN NOT MATCHED THEN INSERT (group_id, subject_id, avg_grade) VALUES (source.group_id, source.subject_id, source.avg_grade);
END;

INSERT INTO grades (student_id, subject_id, grade, teacher_id)
VALUES (1, 1, 5, 1);

SELECT * FROM group_subject_avg;

-----------------------------------------------------------------------------------------------------------------
-- Вычисление и сохранение среднего значения оценок группы по всем предметам
CREATE TABLE group_avg (
    group_id INT PRIMARY KEY,
    avg_grade FLOAT
);

CREATE TRIGGER update_group_avg_trigger
ON grades
AFTER INSERT
AS
BEGIN
    DECLARE @group_id INT, @new_avg FLOAT;

    SELECT @group_id = group_id FROM students WHERE id = (SELECT student_id FROM inserted);

    SELECT @new_avg = AVG(grade) 
    FROM grades 
    JOIN students ON grades.student_id = students.id 
    WHERE students.group_id = @group_id 
    AND grades.grade IS NOT NULL;

    MERGE INTO group_avg AS target
    USING (SELECT @group_id AS group_id, @new_avg AS avg_grade) AS source
    ON target.group_id = source.group_id
    WHEN MATCHED THEN UPDATE SET avg_grade = source.avg_grade
    WHEN NOT MATCHED THEN INSERT (group_id, avg_grade) VALUES (source.group_id, source.avg_grade);
END;

INSERT INTO grades (student_id, subject_id, grade, teacher_id)
VALUES (2, 2, 4, 1);

SELECT * FROM group_avg;

-----------------------------------------------------------------------------------------------------------------
-- Вычисление и сохранение среднего значения оценок по предмету
CREATE TABLE subject_avg (
    subject_id INT PRIMARY KEY,
    avg_grade FLOAT
);

CREATE TRIGGER update_subject_avg_trigger
ON grades
AFTER INSERT
AS
BEGIN
    DECLARE @subject_id INT, @new_avg FLOAT;

    SELECT @subject_id = subject_id FROM inserted;

    SELECT @new_avg = AVG(grade) 
    FROM grades 
    WHERE subject_id = @subject_id AND grade IS NOT NULL;

    MERGE INTO subject_avg AS target
    USING (SELECT @subject_id AS subject_id, @new_avg AS avg_grade) AS source
    ON target.subject_id = source.subject_id
    WHEN MATCHED THEN UPDATE SET avg_grade = source.avg_grade
    WHEN NOT MATCHED THEN INSERT (subject_id, avg_grade) VALUES (source.subject_id, source.avg_grade);
END;

INSERT INTO grades (student_id, subject_id, grade, teacher_id)
VALUES (3, 1, 3, 1);

SELECT * FROM subject_avg;
